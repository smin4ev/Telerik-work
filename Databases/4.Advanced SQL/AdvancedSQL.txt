1.Write a SQL query to find the names and salaries of the employees that take the minimal salary in the company. 
  Use a nested SELECT statement

 SELECT FirstName, LastName, Salary
 FROM Employees
 WHERE Salary =
 (SELECT MIN(Salary) FROM Employees)

2.Write a SQL query to find the names and salaries of the employees that have a salary that is up to 10% 
  higher than the minimal salary for the company.

 SELECT FirstName, LastName, Salary
 FROM Employees
 WHERE Salary <=
 (SELECT MIN(Salary)*1.1 FROM Employees)
 ORDER BY Salary 

3.Write a SQL query to find the full name, salary and department of the employees that take the minimal 
  salary in their department. Use a nested SELECT statement.

 SELECT FirstName, LastName, Salary, DepartmentID
 FROM Employees e
 WHERE Salary =
 (SELECT MIN(Salary) from Employees
 WHERE DepartmentID = e.DepartmentID)
 ORDER BY DepartmentID

4.Write a SQL query to find the average salary in the department #1.

 SELECT
 AVG(Salary) AS [Avarage Salary in Department 1]
 FROM Employees 
 WHERE DepartmentID = 1

5.Write a SQL query to find the average salary  in the "Sales" department.
 
  FIRTS WAY

 SELECT
 AVG(Salary) AS [Avarage Salary in Department 'Sales']
 FROM Employees 
 WHERE DepartmentID IN
 (SELECT DepartmentID FROM Departments
 WHERE Name = 'Sales')

  SECOND WAY

 SELECT 
 AVG(e.Salary) AS [AverageSalary]
 FROM Employees e
     JOIN Departments d
 ON e.DepartmentID = d.DepartmentID
 WHERE d.Name = 'Sales'

6.Write a SQL query to find the number of employees in the "Sales" department.

 SELECT d.Name AS [Departmant Name], COUNT(*) AS [Number of Employees in 'Sales']
 FROM Employees e
 JOIN Departments d
 ON e.DepartmentID = d.DepartmentID
 WHERE d.Name = 'Sales'
 GROUP BY d.Name

7.Write a SQL query to find the number of all employees that have manager.

 FIRST WAY

 SELECT COUNT(*) AS [Employees with Manager]
 FROM Employees e
 JOIN Employees m
 ON e.ManagerID = m.EmployeeID

 SECOND WAY

 SELECT COUNT(*) AS [Employees with Manager]
 FROM Employees 
 WHERE EmployeeID IS NOT NULL

8.Write a SQL query to find the number of all employees that have no manager.

 SELECT COUNT(*) AS [Employees without Manager]
 FROM Employees 
 WHERE ManagerID IS NULL
 
9.Write a SQL query to find all departments and the average salary for each of them.

 SELECT d.Name, AVG(e.Salary) AS [Avarage Salary]
 FROM Employees e
 JOIN Departments d
 ON e.DepartmentID = d.DepartmentID
 GROUP BY d.Name

10.Write a SQL query to find the count of all employees in each department and for each town.

 SELECT d.Name AS [Department Name], t.Name AS [Town], COUNT(e.EmployeeID) AS [Employee Count]
 FROM Employees e
 JOIN Departments d
 ON e.DepartmentID = d.DepartmentID
 JOIN Addresses a
 ON e.AddressID = a.AddressID
 JOIN Towns t
 ON a.TownID = t.TownID
 GROUP BY d.Name, t.Name

11.Write a SQL query to find all managers that have exactly 5 employees. Display their first name and last name.

 SELECT m.FirstName, m.LastName, COUNT(m.EmployeeID) AS [Number of Employees]
 FROM Employees m 
 JOIN Employees e
 ON m.EmployeeID = e.ManagerID
 GROUP BY m.FirstName, m.LastName
 HAVING COUNT(m.EmployeeID) = 5

12.Write a SQL query to find all employees along with their managers. For employees that do not have manager 
   display the value "(no manager)".

 SELECT e.FirstName,e.LastName, ISNULL(m.FirstName, 'no manager') AS [Manager name]
 FROM Employees e
 LEFT OUTER JOIN Employees m
 ON e.ManagerID = m.EmployeeID

13.Write a SQL query to find the names of all employees whose last name is exactly 5 characters long. 
  Use the built-in LEN(str) function.

 SELECT FirstName, LastName
 FROM Employees 
 WHERE LEN(LastName) = 5

14.Write a SQL query to display the current date and time in the following format 
   "day.month.year hour:minutes:seconds:milliseconds". 
   Search in  Google to find how to format dates in SQL Server

 SELECT CONVERT(VARCHAR(50), GETDATE(), 104) + ' ' + CONVERT(VARCHAR(50), GETDATE(),114)

15.Write a SQL statement to create a table Users. Users should have username, password, full name and last 
  login time. Choose appropriate data types for the table fields. Define a primary key column with a primary 
  key constraint. Define the primary key column as identity to facilitate inserting records. Define unique 
  constraint to avoid repeating usernames. Define a check constraint to ensure the password is at 
  least 5 characters long.

  CREATE TABLE Users(
  UserID int IDENTITY,
  Username nvarchar(100) NOT NULL,
  Pass nvarchar(100) NOT NULL,
  FullName nvarchar(100) NOT NULL,
  LastLogin date NOT NULL,
  CONSTRAINT PK_User PRIMARY KEY(UserID),
  CONSTRAINT UNK_User UNIQUE(Username),
  CONSTRAINT PS_Pass CHECK(LEN(pass) >=5 )
  )

16.Write a SQL statement to create a view that displays the users from the Users table that have 
   been in the system today. Test if the view works correctly.

 CREATE VIEW [Users from today] AS
 SELECT *
 FROM Users 
 WHERE CAST(LastLogin as date) >= CAST(GETDATE() as date)
 GO

17.Write a SQL statement to create a table Groups. Groups should have unique name (use unique constraint). 
   Define primary key and identity column

  CREATE TABLE Groups(
  GroupID int IDENTITY,
  Name varchar(50) NOT NULL,
  CONSTRAINT PK_Groups PRIMARY KEY(GroupID),
  CONSTRAINT UNK_Name UNIQUE(Name)
  )

 
18.Write a SQL statement to add a column GroupID to the table Users. Fill some data in this new column 
  and as well in the Groups table. Write a SQL statement to add a foreign key constraint between tables 
  Users and Groups tables.

  ALTER TABLE Users
  ADD GroupID int

  ALTER TABLE Users
  ADD CONSTRAINT FK_Users_Group FOREIGN KEY (GroupID)
  REFERENCES Groups (GroupID)

19.Write SQL statements to insert several records in the Users and Groups tables.

 INSERT INTO Users(Username,Pass, FullName, LastLogin)
 VALUES ('Pesho', '123456', 'Petar Petrov', GETDATE()),
	('Mitko', '654321', 'Dimitar Ivanov', GETDATE()) 

 INSERT INTO Groups(Name)
 VALUES('Telerik Students'),
       ('Softuni Students'),
       ('SU Students')

20.Write SQL statements to update some of the records in the Users and Groups tables.

 UPDATE Users
 SET FullName = 'Boyko Borisov'
 WHERE Username = 'Mitko'

 UPDATE Groups
 SET Name = 'Oxford'
 WHERE GroupID = 3

